describe('ConvController', function(){
	var $rootScope;
	var $scope;
	var controller;
	// The following variable is used to mock the initvar, which is generated by the Chat backend

	var convs = {
		convs: {},
		addConv: function(){},
		get: function(){},
		getHighestOrder: function(){},
		addChatMsg: function(){},
		replaceUsers: function(){},
		notifyMsgInConv: function(){},
		addUserToConv: function(){},
		getFirstConv: function(){},
		makeActive: function(){},
	};
	var och = {
		init : function(){},
		quit : function(){},
		sendChatMsg : function(convId, msg){},
		invite : function(convId, userToInvite, groupConv, callback){},
		newConv : function(userToInvite, success){}
	};
	var activeUser = 'admin';
	var initvar = {"contacts":[{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Handle","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},{"id":"derp","online":true,"displayname":"derp","order":2,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Handle","protocol":"x-owncloud-handle","namespace":"och","value":"derp"}},"address_book_id":"local","address_book_backend":""},{"id":"herp","online":false,"displayname":"herp","order":3,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Handle","protocol":"x-owncloud-handle","namespace":"och","value":"herp"}},"address_book_id":"local","address_book_backend":""}],"contactsList":["admin","derp","herp"],"contactsObj":{"admin":{"id":"admin","online":true,"displayname":"admin","order":1,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Handle","protocol":"x-owncloud-handle","namespace":"och","value":"admin"}},"address_book_id":"local","address_book_backend":""},"derp":{"id":"derp","online":true,"displayname":"derp","order":7,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Handle","protocol":"x-owncloud-handle","namespace":"och","value":"derp"}},"address_book_id":"local","address_book_backend":"","$$hashKey":"009"},"herp":{"id":"herp","online":false,"displayname":"herp","order":6,"backends":{"email":{"id":null,"displayname":"E-mail","protocol":"email","namespace":" email","value":[[]]},"och":{"id":null,"displayname":"ownCloud Handle","protocol":"x-owncloud-handle","namespace":"och","value":"herp"}},"address_book_id":"local","address_book_backend":"","$$hashKey":"00H"}},"backends":{"och":{"displayname":"ownCloud Handle","name":"och","enabled":true,"checked":null,"protocol":"x-owncloud-handle","id":4}},"initConvs":{"och":{"CONV_ID_1409845208_41":{"id":"CONV_ID_1409845208_41","users":["admin","derp"],"backend":"och","messages":[]},"CONV_ID_1409845208_43":{"id":"CONV_ID_1409845208_43","users":["admin","herp"],"backend":"och","messages":[]}}},"sessionId":"c21325b7cb71064f4bf2ed2905d724fe"};
	var backends = initvar.backends;
	backends.och.handle = och;
	beforeEach(module('chat'));
	/**
	 * Create $scope and controller
	 * Mock all factories
	 */
	beforeEach(inject(function($controller, $rootScope){
		$scope = $rootScope.$new();
		for(var key in backends) {
			var backend = backends[key];
			spyOn(backend.handle, 'init');
		}
		spyOn(convs, 'addConv');
		controller = $controller('ConvController', {
			$scope: $scope,
			initvar: initvar,
			och : och,
			convs : convs,
			activeUser: activeUser,
			contacts: {
				'contacts' : initvar.contactsObj,
				getHighestOrder: function(){},
				markOnline: function(){},
				markOffline: function(){}
			},
			backends: backends,
			title: {
				updateTitle: function(){},
				getDefaultTitle: function(){},
				getTitle: function(){},
				notify: function(){},
				emptyNewMsgs: function(){},
			}
		});
	}));

	describe('Initialization', function () {
		it('Should attach convs.convs to $scope.convs', function () {
			expect($scope.convs).toEqual(convs.convs);
		});

		it('Should attach activeUser to $scope.active.user', function () {
			expect($scope.active.user).toEqual(activeUser);
		});

		it('Should attach initConvs to $scope.initConvs', function () {
			expect($scope.initConvs).toEqual(initvar.initConvs);
		});

		it('Should attach initvar to $scope.initvar', function () {
			expect($scope.initvar).toEqual(initvar);
		});

		it('Should attach the first backend to $scope.active.backend', function () {
			for (var key in backends) break;
			expect($scope.active.backend).toEqual(backends[key]);
		});

		describe('Should call the init() method', function () {
			it('Should have called the init() function on every backend', function () {
				for(var key in backends) {
					var backend = backends[key];
					expect(backend.handle.init).toHaveBeenCalled();
				}
			});

			it('Should change $scope.initDone into true', function () {
				expect($scope.initDone).toBeTruthy();
			});

			it('Should call convs.addConv for every och initconvs', function () {
				for(var key in initvar.initConvs.och) {
					expect(convs.addConv).toHaveBeenCalled();
				}
			});

			it('Should call convs.addChatmsg for every chat msg in every och initConv', function () {
				for(var key in initvar.initConvs.och) {
					var conv = initvar.initConvs.och[key];
					for(var msgKey in conv.msgs ) {
						expect(convs.addChatMsg).toHaveBeenCalled();
					}
				}

			});

		});
	});
});